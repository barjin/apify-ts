"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1781],{7054:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>y,frontMatter:()=>c,metadata:()=>h,toc:()=>w});var n=a(7462),s=a(3366),p=(a(7294),a(3905)),r=a(9877),o=a(8215),i=a(1736);var l=["components"],c={id:"capture-screenshot",title:"Capture a screenshot"},u=void 0,h={unversionedId:"examples/capture-screenshot",id:"examples/capture-screenshot",title:"Capture a screenshot",description:"'!!raw-loader!./puppeteerapifysnapshot.js'; import PuppeteerCrawlerPageScreenshotSource from '!!raw-loader!./puppeteercrawlerpage_screenshot.js';",source:"@site/../docs/examples/capture_screenshot.mdx",sourceDirName:"examples",slug:"/examples/capture-screenshot",permalink:"/apify-ts/docs/next/examples/capture-screenshot",tags:[],version:"current",frontMatter:{id:"capture-screenshot",title:"Capture a screenshot"},sidebar:"docs",previous:{title:"Call actor",permalink:"/apify-ts/docs/next/examples/call-actor"},next:{title:"Cheerio crawler",permalink:"/apify-ts/docs/next/examples/cheerio-crawler"}},m={},w=[],d={toc:w};function y(e){var t=e.components,a=(0,s.Z)(e,l);return(0,p.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,p.kt)("div",{parentName:"div",className:"admonition-heading"},(0,p.kt)("h5",{parentName:"div"},(0,p.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,p.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,p.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,p.kt)("div",{parentName:"div",className:"admonition-content"},(0,p.kt)("p",{parentName:"div"},"To run this example on the Apify Platform, select the ",(0,p.kt)("inlineCode",{parentName:"p"},"apify/actor-node-puppeteer-chrome")," image for your Dockerfile."))),(0,p.kt)("p",null,"This example captures a screenshot of a web page using ",(0,p.kt)("inlineCode",{parentName:"p"},"Puppeteer"),". It would look almost exactly the same with ",(0,p.kt)("inlineCode",{parentName:"p"},"Playwright"),"."),(0,p.kt)(r.Z,{mdxType:"Tabs"},(0,p.kt)(o.Z,{value:"pagescreenshot",label:"PageScreenshot",default:!0,mdxType:"TabItem"},(0,p.kt)("p",null,"Using ",(0,p.kt)("inlineCode",{parentName:"p"},"page.screenshot()"),":"),(0,p.kt)(i.Z,{className:"language-js",mdxType:"CodeBlock"},"const Apify = require('apify');\n\nApify.main(async () => {\n    const url = 'http://www.example.com/';\n    // Start a browser\n    const browser = await Apify.launchPuppeteer();\n    // Open new tab in the browser\n    const page = await browser.newPage();\n    // Navigate to the URL\n    await page.goto(url);\n    // Capture the screenshot\n    const screenshot = await page.screenshot();\n    // Save the screenshot to the default key-value store\n    await Apify.setValue('my-key', screenshot, { contentType: 'image/png' });\n    // Close Puppeteer\n    await browser.close();\n});\n")),(0,p.kt)(o.Z,{value:"apifysnapshot",label:"ApifySnapshot",default:!0,mdxType:"TabItem"},(0,p.kt)("p",null,"Using ",(0,p.kt)("inlineCode",{parentName:"p"},"Apify.utils.puppeteer.saveSnapshot()"),":"),(0,p.kt)(i.Z,{className:"language-js",mdxType:"CodeBlock"},"const Apify = require('apify');\n\nApify.main(async () => {\n    const url = 'http://www.example.com/';\n    // Start a browser\n    const browser = await Apify.launchPuppeteer();\n    // Open new tab in the browser\n    const page = await browser.newPage();\n    // Navigate to the URL\n    await page.goto(url);\n    // Capture the screenshot\n    await Apify.utils.puppeteer.saveSnapshot(page, { key: 'my-key', saveHtml: false });\n    // Close Puppeteer\n    await browser.close();\n});\n"))),(0,p.kt)("p",null,"This example captures a screenshot of multiple web pages when using ",(0,p.kt)("inlineCode",{parentName:"p"},"PuppeteerCrawler"),":"),(0,p.kt)(r.Z,{mdxType:"Tabs"},(0,p.kt)(o.Z,{value:"pagescreenshot",label:"PageScreenshot",default:!0,mdxType:"TabItem"},(0,p.kt)("p",null,"Using ",(0,p.kt)("inlineCode",{parentName:"p"},"page.screenshot()"),":"),(0,p.kt)(i.Z,{className:"language-js",mdxType:"CodeBlock"},"const Apify = require('apify');\n\nApify.main(async () => {\n    // Add URLs to a RequestList\n    const requestList = await Apify.openRequestList('start-urls',\n        [\n            { url: 'http://www.example.com/page-1' },\n            { url: 'http://www.example.com/page-2' },\n            { url: 'http://www.example.com/page-3' },\n        ]);\n    // Function called for each URL\n    const handlePageFunction = async ({ request, page }) => {\n        // Capture the screenshot with Puppeteer\n        const screenshot = await page.screenshot();\n        // Convert the URL into a valid key\n        const key = request.url.replace(/[:/]/g, '_');\n        // Save the screenshot to the default key-value store\n        await Apify.setValue(key, screenshot, { contentType: 'image/png' });\n    };\n    // Create a PuppeteerCrawler\n    const crawler = new Apify.PuppeteerCrawler({\n        requestList,\n        handlePageFunction,\n    });\n    // Run the crawler\n    await crawler.run();\n});\n")),(0,p.kt)(o.Z,{value:"apifysnapshot",label:"ApifySnapshot",default:!0,mdxType:"TabItem"},(0,p.kt)("p",null,"Using ",(0,p.kt)("inlineCode",{parentName:"p"},"Apify.utils.puppeteer.saveSnapshot()"),":"),(0,p.kt)(i.Z,{className:"language-js",mdxType:"CodeBlock"},"const Apify = require('apify');\n\nApify.main(async () => {\n    // Add URLs to a RequestList\n    const requestList = await Apify.openRequestList('start-urls',\n        [\n            { url: 'http://www.example.com/page-1' },\n            { url: 'http://www.example.com/page-2' },\n            { url: 'http://www.example.com/page-3' },\n        ]);\n    // Function called for each URL\n    const handlePageFunction = async ({ request, page }) => {\n        // Convert the URL into a valid key\n        const key = request.url.replace(/[:/]/g, '_');\n        // Capture the screenshot\n        await Apify.utils.puppeteer.saveSnapshot(page, { key, saveHtml: false });\n    };\n    // Create a PuppeteerCrawler\n    const crawler = new Apify.PuppeteerCrawler({\n        requestList,\n        handlePageFunction,\n    });\n    // Run the crawler\n    await crawler.run();\n});\n"))),(0,p.kt)("p",null,"In both examples using ",(0,p.kt)("inlineCode",{parentName:"p"},"page.screenshot()"),", a ",(0,p.kt)("inlineCode",{parentName:"p"},"key")," variable is created based on the URL of the web page. This variable is used as the key when saving\neach screenshot into a key-value store."))}y.isMDXComponent=!0}}]);