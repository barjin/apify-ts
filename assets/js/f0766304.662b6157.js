"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8258],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),f=a,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6524:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>l,metadata:()=>c,assets:()=>p,toc:()=>u,default:()=>f});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={id:"crawl-sitemap",title:"Crawl a sitemap",original_id:"crawl-sitemap"},l=void 0,c={unversionedId:"examples/crawl-sitemap",id:"version-2.0.6/examples/crawl-sitemap",title:"Crawl a sitemap",description:"This example downloads and crawls the URLs from a sitemap.",source:"@site/versioned_docs/version-2.0.6/examples/crawl_sitemap.md",sourceDirName:"examples",slug:"/examples/crawl-sitemap",permalink:"/apify-ts/docs/examples/crawl-sitemap",tags:[],version:"2.0.6",lastUpdatedBy:"Martin Ad\xe1mek",lastUpdatedAt:1646757267,formattedLastUpdatedAt:"3/8/2022",frontMatter:{id:"crawl-sitemap",title:"Crawl a sitemap",original_id:"crawl-sitemap"},sidebar:"version-2.0.6/docs",previous:{title:"Crawl a single URL",permalink:"/apify-ts/docs/examples/crawl-single-url"},next:{title:"Crawl some links on a website",permalink:"/apify-ts/docs/examples/crawl-some-links"}},p={},u=[],m={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This example downloads and crawls the URLs from a sitemap."),(0,o.kt)("p",null,"\\\nUsing ",(0,o.kt)("inlineCode",{parentName:"p"},"CheerioCrawler"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Apify = require('apify');\n\nApify.main(async () => {\n    // Add URLs to a RequestList from a sitemap\n    const sources = [{ requestsFromUrl: 'https://apify.com/sitemap.xml' }];\n    const requestList = await Apify.openRequestList('start-urls', sources);\n\n    // Function called for each URL\n    const handlePageFunction = async ({ request }) => {\n        console.log(request.url);\n    };\n\n    // Create a crawler that uses Cheerio\n    const crawler = new Apify.CheerioCrawler({\n        requestList,\n        handlePageFunction,\n        maxRequestsPerCrawl: 10, // Limitation for only 10 requests (do not use if you want to crawl a sitemap)\n    });\n\n    // Run the crawler\n    await crawler.run();\n});\n")),(0,o.kt)("p",null,"\\\nUsing ",(0,o.kt)("inlineCode",{parentName:"p"},"PuppeteerCrawler"),":"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To run this example on the Apify Platform, select the ",(0,o.kt)("inlineCode",{parentName:"p"},"apify/actor-node-puppeteer-chrome")," image for your Dockerfile.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Apify = require('apify');\n\nApify.main(async () => {\n    // Add URLs to a RequestList from a sitemap\n    const sources = [{ requestsFromUrl: 'https://apify.com/sitemap.xml' }];\n    const requestList = await Apify.openRequestList('start-urls', sources);\n\n    // Function called for each URL\n    const handlePageFunction = async ({ request }) => {\n        console.log(request.url);\n    };\n\n    // Create a crawler that runs Puppeteer\n    const crawler = new Apify.PuppeteerCrawler({\n        requestList,\n        handlePageFunction,\n        maxRequestsPerCrawl: 10, // Limitation for only 10 requests (do not use if you want to crawl a sitemap)\n    });\n\n    // Run the crawler\n    await crawler.run();\n});\n")),(0,o.kt)("p",null,"\\\nUsing ",(0,o.kt)("inlineCode",{parentName:"p"},"PlaywrightCrawler"),":"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To run this example on the Apify Platform, select the ",(0,o.kt)("inlineCode",{parentName:"p"},"apify/actor-node-playwright-chrome")," image for your Dockerfile.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Apify = require('apify');\n\nApify.main(async () => {\n    // Add URLs to a RequestList from a sitemap\n    const sources = [{ requestsFromUrl: 'https://apify.com/sitemap.xml' }];\n    const requestList = await Apify.openRequestList('start-urls', sources);\n\n    // Function called for each URL\n    const handlePageFunction = async ({ request }) => {\n        console.log(request.url);\n    };\n\n    // Create a crawler that runs Playwright\n    const crawler = new Apify.PlaywrightCrawler({\n        requestList,\n        handlePageFunction,\n        maxRequestsPerCrawl: 10, // Limitation for only 10 requests (do not use if you want to crawl a sitemap)\n    });\n\n    // Run the crawler\n    await crawler.run();\n});\n")))}f.isMDXComponent=!0}}]);