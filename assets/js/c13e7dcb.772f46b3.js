"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6457],{5827:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>g,frontMatter:()=>u,metadata:()=>w,toc:()=>h});var r=a(7462),p=a(3366),n=(a(7294),a(3905)),s=a(9877),l=a(8215),o=a(1736);var c=["components"],u={id:"puppeteer-capture-screenshot",title:"Capture a screenshot using Puppeteer"},i=void 0,w={unversionedId:"examples/crawlers/puppeteer/puppeteer-capture-screenshot",id:"examples/crawlers/puppeteer/puppeteer-capture-screenshot",title:"Capture a screenshot using Puppeteer",description:"To run this example on the Apify Platform, select the apify/actor-node-puppeteer-chrome image for your Dockerfile.",source:"@site/../docs/examples/crawlers/puppeteer/puppeteer_capture_screenshot.mdx",sourceDirName:"examples/crawlers/puppeteer",slug:"/examples/crawlers/puppeteer/puppeteer-capture-screenshot",permalink:"/apify-ts/docs/next/examples/crawlers/puppeteer/puppeteer-capture-screenshot",tags:[],version:"current",lastUpdatedBy:"Martin Ad\xe1mek",lastUpdatedAt:1646757267,formattedLastUpdatedAt:"3/8/2022",frontMatter:{id:"puppeteer-capture-screenshot",title:"Capture a screenshot using Puppeteer"},sidebar:"docs",previous:{title:"Playwright crawler",permalink:"/apify-ts/docs/next/examples/crawlers/playwright/playwright-crawler"},next:{title:"Puppeteer crawler",permalink:"/apify-ts/docs/next/examples/crawlers/puppeteer/puppeteer-crawler"}},m={},h=[],d={toc:h};function g(e){var t=e.components,a=(0,p.Z)(e,c);return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"To run this example on the Apify Platform, select the ",(0,n.kt)("inlineCode",{parentName:"p"},"apify/actor-node-puppeteer-chrome")," image for your Dockerfile."))),(0,n.kt)("p",null,"This example captures a screenshot of a web page using ",(0,n.kt)("inlineCode",{parentName:"p"},"Puppeteer"),". It would look almost exactly the same with ",(0,n.kt)("inlineCode",{parentName:"p"},"Playwright"),"."),(0,n.kt)(s.Z,{groupId:"puppeteer-capture-screenshot",mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"pagescreenshot",label:"Page Screenshot",mdxType:"TabItem"},(0,n.kt)("p",null,"Using ",(0,n.kt)("inlineCode",{parentName:"p"},"page.screenshot()"),":"),(0,n.kt)(o.Z,{className:"language-js",mdxType:"CodeBlock"},"import { KeyValueStore, launchPuppeteer } from '@crawlers/puppeteer';\n\nconst keyValueStore = await KeyValueStore.open();\n\nconst url = 'http://www.example.com/';\n// Start a browser\nconst browser = await launchPuppeteer();\n\n// Open new tab in the browser\nconst page = await browser.newPage();\n\n// Navigate to the URL\nawait page.goto(url);\n\n// Capture the screenshot\nconst screenshot = await page.screenshot();\n\n// Save the screenshot to the default key-value store\nawait keyValueStore.setValue('my-key', screenshot, { contentType: 'image/png' });\n\n// Close Puppeteer\nawait browser.close();\n")),(0,n.kt)(l.Z,{value:"crawlerutilsscreenshot",label:"Crawler Utils Screenshot",default:!0,mdxType:"TabItem"},(0,n.kt)("p",null,"Using ",(0,n.kt)("inlineCode",{parentName:"p"},"puppeteerUtils.saveSnapshot()"),":"),(0,n.kt)(o.Z,{className:"language-js",mdxType:"CodeBlock"},"import { launchPuppeteer, puppeteerUtils } from '@crawlers/puppeteer';\n\nconst url = 'http://www.example.com/';\n// Start a browser\nconst browser = await launchPuppeteer();\n\n// Open new tab in the browser\nconst page = await browser.newPage();\n\n// Navigate to the URL\nawait page.goto(url);\n\n// Capture the screenshot\nawait puppeteerUtils.saveSnapshot(page, { key: 'my-key', saveHtml: false });\n\n// Close Puppeteer\nawait browser.close();\n"))),(0,n.kt)("p",null,"This example captures a screenshot of multiple web pages when using ",(0,n.kt)("inlineCode",{parentName:"p"},"PuppeteerCrawler"),":"),(0,n.kt)(s.Z,{groupId:"puppeteer-capture-screenshot",mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"pagescreenshot",label:"Page Screenshot",mdxType:"TabItem"},(0,n.kt)("p",null,"Using ",(0,n.kt)("inlineCode",{parentName:"p"},"page.screenshot()"),":"),(0,n.kt)(o.Z,{className:"language-js",mdxType:"CodeBlock"},"import { PuppeteerCrawler, KeyValueStore } from '@crawlers/puppeteer';\n\nconst keyValueStore = await KeyValueStore.open();\n\n// Create a PuppeteerCrawler\nconst crawler = new PuppeteerCrawler({\n    async requestHandler({ request, page }) {\n        // Capture the screenshot with Puppeteer\n        const screenshot = await page.screenshot();\n        // Convert the URL into a valid key\n        const key = request.url.replace(/[:/]/g, '_');\n        // Save the screenshot to the default key-value store\n        await keyValueStore.setValue(key, screenshot, { contentType: 'image/png' });\n    },\n});\n\nawait crawler.addRequests([\n    { url: 'http://www.example.com/page-1' },\n    { url: 'http://www.example.com/page-2' },\n    { url: 'http://www.example.com/page-3' },\n]);\n\n// Run the crawler\nawait crawler.run();\n")),(0,n.kt)(l.Z,{value:"crawlerutilsscreenshot",label:"Crawler Utils Screenshot",default:!0,mdxType:"TabItem"},(0,n.kt)("p",null,"Using ",(0,n.kt)("inlineCode",{parentName:"p"},"puppeteerUtils.saveSnapshot()"),":"),(0,n.kt)(o.Z,{className:"language-js",mdxType:"CodeBlock"},"import { PuppeteerCrawler, puppeteerUtils } from '@crawlers/puppeteer';\n\n// Create a PuppeteerCrawler\nconst crawler = new PuppeteerCrawler({\n    async requestHandler({ request, page }) {\n        // Convert the URL into a valid key\n        const key = request.url.replace(/[:/]/g, '_');\n        // Capture the screenshot\n        await puppeteerUtils.saveSnapshot(page, { key, saveHtml: false });\n    },\n});\n\nawait crawler.addRequests([\n    { url: 'http://www.example.com/page-1' },\n    { url: 'http://www.example.com/page-2' },\n    { url: 'http://www.example.com/page-3' },\n]);\n\n// Run the crawler\nawait crawler.run();\n"))),(0,n.kt)("p",null,"In both examples using ",(0,n.kt)("inlineCode",{parentName:"p"},"page.screenshot()"),", a ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," variable is created based on the URL of the web page. This variable is used as the key when saving\neach screenshot into a key-value store."))}g.isMDXComponent=!0}}]);