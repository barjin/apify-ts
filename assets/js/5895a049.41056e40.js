"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7452],{4633:(e,a,t)=>{t.d(a,{Z:()=>i});var r=t(7294),n=t(3725),s=t(2263);const i=function(e){var a=e.apiPath,t=e.children,i=(0,n.useDocsVersion)(),o=(0,s.default)().siteConfig;return r.createElement("a",{href:o.baseUrl+"api/"+("current"===i.version?"next":i.version)+"/"+a},t)}},4073:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>h,default:()=>w,frontMatter:()=>c,metadata:()=>d,toc:()=>u});var r=t(7462),n=t(3366),s=(t(7294),t(3905)),i=t(1736),o=t(4633);var l=["components"],c={id:"cheerio-crawler",title:"Cheerio crawler"},h=void 0,d={unversionedId:"examples/crawlers/cheerio/cheerio-crawler",id:"examples/crawlers/cheerio/cheerio-crawler",title:"Cheerio crawler",description:"This example demonstrates how to use CheerioCrawler to crawl a list of URLs from an external file, load each URL using",source:"@site/../docs/examples/crawlers/cheerio/cheerio_crawler.mdx",sourceDirName:"examples/crawlers/cheerio",slug:"/examples/crawlers/cheerio/cheerio-crawler",permalink:"/apify-ts/docs/next/examples/crawlers/cheerio/cheerio-crawler",tags:[],version:"current",lastUpdatedBy:"Martin Ad\xe1mek",lastUpdatedAt:1646757267,formattedLastUpdatedAt:"3/8/2022",frontMatter:{id:"cheerio-crawler",title:"Cheerio crawler"},sidebar:"docs",previous:{title:"Basic crawler",permalink:"/apify-ts/docs/next/examples/crawlers/basic/basic-crawler"},next:{title:"Crawl all links on a website",permalink:"/apify-ts/docs/next/examples/crawlers/crawl-all-links"}},p={},u=[],m={toc:u};function w(e){var a=e.components,t=(0,n.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This example demonstrates how to use ",(0,s.kt)(o.Z,{apiPath:"cheerio-crawler",mdxType:"VersionedApiLink"},(0,s.kt)("inlineCode",{parentName:"p"},"CheerioCrawler"))," to crawl a list of URLs from an external file, load each URL using\na plain HTTP request, parse the HTML using the ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cheerio",target:"_blank",rel:"noopener"},"Cheerio library")," and extract some data from it: the page title\nand all ",(0,s.kt)("inlineCode",{parentName:"p"},"h1")," tags."),(0,s.kt)(i.Z,{className:"language-js",mdxType:"CodeBlock"},"import { Dataset, CheerioCrawler, log, LogLevel } from '@crawlers/cheerio';\n\nconst dataset = await Dataset.open();\n\n// Crawlers come with various utilities, e.g. for logging.\n// Here we use debug level of logging to improve the debugging experience.\n// This functionality is optional!\nlog.setLevel(LogLevel.DEBUG);\n\n// Create an instance of the CheerioCrawler class - a crawler\n// that automatically loads the URLs and parses their HTML using the cheerio library.\nconst crawler = new CheerioCrawler({\n    // The crawler downloads and processes the web pages in parallel, with a concurrency\n    // automatically managed based on the available system memory and CPU (see AutoscaledPool class).\n    // Here we define some hard limits for the concurrency.\n    minConcurrency: 10,\n    maxConcurrency: 50,\n\n    // On error, retry each page at most once.\n    maxRequestRetries: 1,\n\n    // Increase the timeout for processing of each page.\n    handlePageTimeoutSecs: 30,\n\n    // Limit to 10 requests per one crawl\n    maxRequestsPerCrawl: 10,\n\n    // This function will be called for each URL to crawl.\n    // It accepts a single parameter, which is an object with options as:\n    // https://sdk.apify.com/docs/typedefs/cheerio-crawler-options#handlepagefunction\n    // We use for demonstration only 2 of them:\n    // - request: an instance of the Request class with information such as URL and HTTP method\n    // - $: the cheerio object containing parsed HTML\n    async requestHandler({ request, $ }) {\n        log.debug(`Processing ${request.url}...`);\n\n        // Extract data from the page using cheerio.\n        const title = $('title').text();\n        const h1texts = [];\n        $('h1').each((index, el) => {\n            h1texts.push({\n                text: $(el).text(),\n            });\n        });\n\n        // Store the results to the dataset. In local configuration,\n        // the data will be stored as JSON files in ./apify_storage/datasets/default\n        await dataset.pushData({\n            url: request.url,\n            title,\n            h1texts,\n        });\n    },\n\n    // This function is called if the page processing failed more than maxRequestRetries+1 times.\n    failedRequestHandler({ request }) {\n        log.debug(`Request ${request.url} failed twice.`);\n    },\n});\n\n// Run the crawler and wait for it to finish.\nawait crawler.run();\n\nlog.debug('Crawler finished.');\n"))}w.isMDXComponent=!0}}]);