"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2324],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(r),d=a,m=f["".concat(o,".").concat(d)]||f[d]||u[d]||i;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=f;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6841:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>s,contentTitle:()=>o,metadata:()=>c,toc:()=>p,default:()=>f});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],s={id:"basic-crawler",title:"Basic crawler"},o=void 0,c={unversionedId:"examples/basic-crawler",id:"examples/basic-crawler",isDocsHomePage:!1,title:"Basic crawler",description:"This is the most bare-bones example of the Apify SDK, which demonstrates some of its building blocks such as the",source:"@site/../docs/examples/basic_crawler.md",sourceDirName:"examples",slug:"/examples/basic-crawler",permalink:"/apify-ts/docs/next/examples/basic-crawler",tags:[],version:"current",frontMatter:{id:"basic-crawler",title:"Basic crawler"},sidebar:"docs",previous:{title:"Add data to dataset",permalink:"/apify-ts/docs/next/examples/add-data-to-dataset"},next:{title:"Call actor",permalink:"/apify-ts/docs/next/examples/call-actor"}},p=[],u={toc:p};function f(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is the most bare-bones example of the Apify SDK, which demonstrates some of its building blocks such as the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/basic-crawler",target:null,rel:null},(0,i.kt)("inlineCode",{parentName:"a"},"BasicCrawler")),". You probably don't need to go this deep though, and it would be better to start with one of the full\nfeatured crawlers like ",(0,i.kt)("a",{parentName:"p",href:"https://sdk.apify.com/docs/examples/cheerio-crawler",target:null,rel:null},(0,i.kt)("inlineCode",{parentName:"a"},"CheerioCrawler"))," or\n",(0,i.kt)("a",{parentName:"p",href:"https://sdk.apify.com/docs/examples/playwright-crawler",target:null,rel:null},(0,i.kt)("inlineCode",{parentName:"a"},"PlaywrightCrawler")),"."),(0,i.kt)("p",null,"The script simply downloads several web pages with plain HTTP requests using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/utils#requestasbrowser",target:null,rel:null},(0,i.kt)("inlineCode",{parentName:"a"},"Apify.utils.requestAsBrowser()")),"\nconvenience function and stores their raw HTML and URL in the default dataset. In local configuration, the data will be stored as JSON files in\n",(0,i.kt)("inlineCode",{parentName:"p"},"./apify_storage/datasets/default"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Apify = require('apify');\n\n// Apify.main() function wraps the crawler logic (it is optional).\nApify.main(async () => {\n    // Create and initialize an instance of the RequestList class that contains\n    // a list of URLs to crawl. Here we use just a few hard-coded URLs.\n    const requestList = await Apify.openRequestList('start-urls', [\n        { url: 'http://www.google.com/' },\n        { url: 'http://www.example.com/' },\n        { url: 'http://www.bing.com/' },\n        { url: 'http://www.wikipedia.com/' },\n    ]);\n\n    // Create a BasicCrawler - the simplest crawler that enables\n    // users to implement the crawling logic themselves.\n    const crawler = new Apify.BasicCrawler({\n        // Let the crawler fetch URLs from our list.\n        requestList,\n\n        // This function will be called for each URL to crawl.\n        handleRequestFunction: async ({ request }) => {\n            const { url } = request;\n            console.log(`Processing ${url}...`);\n\n            // Fetch the page HTML via Apify utils requestAsBrowser\n            const { body } = await Apify.utils.requestAsBrowser({ url });\n\n            // Store the HTML and URL to the default dataset.\n            await Apify.pushData({\n                url: request.url,\n                html: body,\n            });\n        },\n    });\n\n    // Run the crawler and wait for it to finish.\n    await crawler.run();\n\n    console.log('Crawler finished.');\n});\n")))}f.isMDXComponent=!0}}]);